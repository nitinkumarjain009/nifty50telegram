name: Nifty Bot Analysis Scheduler
on:
  schedule:
    # Run at 9:15 AM and 3:45 PM IST on weekdays (3:45 AM and 10:15 AM UTC)
    - cron: '45 3,10 * * 1-5'
  
  # Allow manual trigger from GitHub Actions tab
  workflow_dispatch:
jobs:
  run-nifty-bot:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then 
            pip install -r requirements.txt
          else 
            pip install requests pandas beautifulsoup4 pandas_ta twilio numpy
          fi
      
      - name: Patch pandas_ta library with improved approach
        run: |
          echo "Patching pandas_ta squeeze_pro.py file to fix numpy NaN import..."
          python - <<EOF
          import os
          import pandas_ta
          
          squeeze_pro_path = os.path.join(os.path.dirname(pandas_ta.__file__), 'momentum/squeeze_pro.py')
          print(f"File path: {squeeze_pro_path}")
          
          if os.path.exists(squeeze_pro_path):
              # Read the content of the file
              with open(squeeze_pro_path, 'r') as file:
                  content = file.read()
              
              # Make the replacement
              if 'from numpy import NaN as npNaN' in content:
                  content = content.replace('from numpy import NaN as npNaN', 'from numpy import nan as npNaN')
                  
                  # Write the modified content back to the file
                  with open(squeeze_pro_path, 'w') as file:
                      file.write(content)
                  print("Patch applied successfully.")
              else:
                  print("The target import statement was not found. File might be already patched or has changed.")
          else:
              print("Warning: Could not find the squeeze_pro.py file. Patching failed.")
          EOF
      
      - name: Send startup notification
        run: |
          echo "Sending bot startup notification..."
          if [ -n "${{ secrets.TELEGRAM_API_KEY }}" ] && [ -n "${{ secrets.TELEGRAM_CHAT_ID }}" ]; then
            curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_API_KEY }}/sendMessage" \
            -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d text="🚀 Nifty Bot Analysis started running at $(date)"
          fi
      
      - name: Run Nifty Bot Script
        id: run_script
        continue-on-error: true
        env:
          TELEGRAM_API_KEY: ${{ secrets.TELEGRAM_API_KEY }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          WHATSAPP_ADMIN: ${{ secrets.WHATSAPP_ADMIN }}
          WHATSAPP_GROUP: ${{ secrets.WHATSAPP_GROUP }}
          TWILIO_ACCOUNT_SID: ${{ secrets.TWILIO_ACCOUNT_SID }}
          TWILIO_AUTH_TOKEN: ${{ secrets.TWILIO_AUTH_TOKEN }}
          TWILIO_FROM_NUMBER: ${{ secrets.TWILIO_FROM_NUMBER }}
        run: |
          python nifty_telegram_bot_github.py
      
      - name: Check for errors
        if: steps.run_script.outcome == 'failure'
        run: |
          echo "Script execution failed. Sending notification..."
          # If you have Telegram integration already, you can send failure notification
          if [ -n "${{ secrets.TELEGRAM_API_KEY }}" ] && [ -n "${{ secrets.TELEGRAM_CHAT_ID }}" ]; then
            curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_API_KEY }}/sendMessage" \
            -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d text="⚠️ Nifty Bot Analysis failed to run. Please check GitHub Actions logs."
          fi
      
      - name: Upload logs on failure
        if: steps.run_script.outcome == 'failure'
        uses: actions/upload-artifact@v4
        with:
          name: error-logs
          path: |
            *.log
            *.txt
          retention-days: 5
