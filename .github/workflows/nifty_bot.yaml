name: Nifty Bot Analysis Scheduler
on:
  schedule:
    # Run at 9:15 AM and 3:45 PM IST on weekdays (3:45 AM and 10:15 AM UTC)
    - cron: '45 3,10 * * 1-5'
  
  # Allow manual trigger from GitHub Actions tab
  workflow_dispatch:
jobs:
  run-nifty-bot:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then 
            pip install -r requirements.txt
          else 
            pip install requests pandas dataframe_image matplotlib
            pip install git+https://github.com/twopirllc/pandas-ta.git@development
          fi
      
      - name: Apply NumPy fix
        run: |
          echo "import numpy as np; np.NaN = np.nan" > numpy_fix.py
      
      - name: Send test notification
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_API_KEY }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          python -c "
          import requests
          import os
          import logging
          
          # Get environment variables
          token = os.environ.get('TELEGRAM_TOKEN')
          chat_id = os.environ.get('TELEGRAM_CHAT_ID')
          
          if token and chat_id:
              send_url = f'https://api.telegram.org/bot{token}/sendMessage'
              payload = {
                  'chat_id': chat_id,
                  'text': '🧪 Testing Nifty Bot workflow at $(date)',
                  'parse_mode': 'HTML'
              }
              
              try:
                  response = requests.post(send_url, data=payload, timeout=15)
                  response.raise_for_status()
                  print('Test message sent successfully!')
              except Exception as e:
                  print(f'Error sending test message: {e}')
          else:
              print('Missing Telegram credentials')
          "
      
      - name: Run Telegram Sender Script
        id: run_script
        continue-on-error: true
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_API_KEY }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_GROUP_CHANNEL: ${{ secrets.TELEGRAM_GROUP_ID }}
          PYTHONPATH: ${{ github.workspace }}
        run: |
          # Create a simple test script that imports telegram_sender
          cat > test_telegram.py << 'EOF'
          import numpy as np
          np.NaN = np.nan  # Add NaN to numpy namespace
          
          import os
          import pandas as pd
          from datetime import datetime, timezone
          from telegram_sender import send_text_message, send_photo_message
          
          # Get environment variables
          chat_id = os.environ.get('TELEGRAM_CHAT_ID')
          group_id = os.environ.get('TELEGRAM_GROUP_CHANNEL')
          
          # Send a test message
          print("Sending test message to Telegram...")
          timestamp = datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M:%S UTC')
          test_message = f"🤖 Nifty Bot Analysis is running a test at {timestamp}"
          
          if chat_id:
              success = send_text_message(test_message, chat_id)
              print(f"Message to chat_id sent: {success}")
          
          if group_id:
              success = send_text_message(test_message, group_id)
              print(f"Message to group_id sent: {success}")
          
          print("Test completed.")
          EOF
          
          # Run the test script
          python test_telegram.py
      
      - name: Send completion notification
        if: steps.run_script.outcome == 'success'
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_API_KEY }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          python -c "
          import requests
          import os
          
          token = os.environ.get('TELEGRAM_TOKEN')
          chat_id = os.environ.get('TELEGRAM_CHAT_ID')
          
          if token and chat_id:
              send_url = f'https://api.telegram.org/bot{token}/sendMessage'
              payload = {
                  'chat_id': chat_id,
                  'text': '✅ Nifty Bot Analysis workflow completed successfully',
                  'parse_mode': 'HTML'
              }
              
              try:
                  response = requests.post(send_url, data=payload, timeout=15)
                  response.raise_for_status()
                  print('Success message sent!')
              except Exception as e:
                  print(f'Error sending success message: {e}')
          "
      
      - name: Check for errors
        if: steps.run_script.outcome == 'failure'
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_API_KEY }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          python -c "
          import requests
          import os
          
          token = os.environ.get('TELEGRAM_TOKEN')
          chat_id = os.environ.get('TELEGRAM_CHAT_ID')
          
          if token and chat_id:
              send_url = f'https://api.telegram.org/bot{token}/sendMessage'
              payload = {
                  'chat_id': chat_id,
                  'text': '⚠️ Nifty Bot Analysis failed to run. Please check GitHub Actions logs.',
                  'parse_mode': 'HTML'
              }
              
              try:
                  response = requests.post(send_url, data=payload, timeout=15)
                  response.raise_for_status()
                  print('Error message sent!')
              except Exception as e:
                  print(f'Error sending error message: {e}')
          "
      
      - name: Upload logs on failure
        if: steps.run_script.outcome == 'failure'
        uses: actions/upload-artifact@v4
        with:
          name: error-logs
          path: |
            *.log
            *.txt
          retention-days: 5
