#!/usr/bin/env python3
import sys
import os
import logging
import datetime
import numpy as np
import subprocess
import importlib.util

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Check and install required packages
required_packages = ['requests', 'pandas', 'beautifulsoup4', 'pandas_ta']

for package in required_packages:
    try:
        if package == 'pandas_ta':
            # Check if pandas_ta is installed
            if importlib.util.find_spec("pandas_ta") is None:
                logger.info(f"Installing {package}...")
                subprocess.check_call([sys.executable, "-m", "pip", "install", package])
                logger.info(f"{package} installed successfully.")
            else:
                logger.info(f"{package} is already installed.")
        else:
            # For other packages, just import to check
            __import__(package)
    except (ImportError, subprocess.CalledProcessError) as e:
        logger.error(f"Error installing {package}: {str(e)}")
        logger.info(f"Attempting to install {package}...")
        try:
            subprocess.check_call([sys.executable, "-m", "pip", "install", package])
            logger.info(f"{package} installed successfully.")
        except subprocess.CalledProcessError as e:
            logger.error(f"Failed to install {package}: {str(e)}")
            sys.exit(1)

# Import packages (after ensuring they're installed)
import requests
import pandas as pd
from bs4 import BeautifulSoup
import pandas_ta as ta

# Telegram configuration - using environment variables for security with fallback to hardcoded values
API_KEY = os.environ.get("TELEGRAM_API_KEY", "8017759392:AAEwM-W-y83lLXTjlPl8sC_aBmizuIrFXnU")
CHAT_ID = os.environ.get("TELEGRAM_CHAT_ID", "@stockniftybot")  # Using channel username
BASE_URL = f"https://api.telegram.org/bot{API_KEY}"

# Function to debug Telegram connection
def debug_telegram_connection():
    try:
        # Get bot info to check if token is valid
        test_url = f"{BASE_URL}/getMe"
        response = requests.get(test_url)
        if response.status_code == 200:
            bot_info = response.json()
            logger.info(f"Bot connection successful. Bot name: {bot_info['result']['first_name']}")
        else:
            logger.error(f"Bot connection failed: {response.text}")
            
        # Test channel posting permission
        test_message = "Testing bot permissions in this channel."
        send_telegram_message(test_message)
        
    except Exception as e:
        logger.error(f"Debug test failed: {str(e)}")

# Function to send message to Telegram channel
def send_telegram_message(text):
    url = f"{BASE_URL}/sendMessage"
    payload = {
        "chat_id": CHAT_ID,  # Using channel username: @stockniftybot
        "text": text,
        "parse_mode": "Markdown"
    }
    
    try:
        response = requests.post(url, data=payload)
        if response.status_code == 200:
            logger.info(f"Message sent successfully to {CHAT_ID}")
        else:
            error_info = response.json() if response.text else "No error details"
            logger.error(f"Failed to send message: {error_info}")
    except Exception as e:
        logger.error(f"Error sending message: {str(e)}")

# Function to get historical price data for RSI calculation
def get_historical_data(symbol, timeframe='1M'):
    try:
        # In real implementation, this would fetch data from an API
        # For now, generating sample data
        end_date = datetime.datetime.now()
        
        # Determine date range based on timeframe
        if timeframe == '1M':
            # Monthly data - 24 months
            start_date = end_date - datetime.timedelta(days=730)
            periods = 24
        else:  # '1W'
            # Weekly data - 52 weeks
            start_date = end_date - datetime.timedelta(days=365)
            periods = 52
            
        date_range = pd.date_range(start=start_date, end=end_date, periods=periods)
        
        # Generate sample data based on symbol hash for consistency
        np.random.seed(sum(ord(c) for c in symbol))
        
        # Create price data with some trend and randomness
        base_price = 100 + (sum(ord(c) for c in symbol) % 900)
        trend = np.linspace(-20, 20, periods)
        noise = np.random.normal(0, 10, periods)
        prices = base_price + trend + noise
        
        # Create DataFrame
        df = pd.DataFrame({
            'date': date_range,
            'close': prices.clip(min=10)  # Ensure no negative prices
        })
        
        return df
    except Exception as e:
        logger.error(f"Error getting historical data for {symbol}: {str(e)}")
        return pd.DataFrame()

# Function to calculate RSI
def calculate_rsi(df, period=14):
    try:
        if df.empty:
            return None
        
        # Calculate RSI using pandas_ta
        rsi = ta.rsi(df['close'], length=period)
        return rsi.iloc[-1]  # Return latest RSI value
    except Exception as e:
        logger.error(f"Error calculating RSI: {str(e)}")
        return None

# Function to get Nifty indices stocks data
def get_index_stocks(index_name):
    try:
        # In a real implementation, this would fetch from NSE API
        # For now, using fallback data with different stocks for each index
        
        # Base data structure with common fields
        base_data = {
            'change': [],
            'pChange': [],
            'lastPrice': []
        }
        
        # Different symbols for each index category
        if index_name == "NIFTY_LARGECAP":
            symbols = ['RELIANCE', 'TCS', 'HDFCBANK', 'INFY', 'ICICIBANK', 'HDFC', 'ITC', 
                      'KOTAKBANK', 'LT', 'AXISBANK', 'SBIN', 'BHARTIARTL', 'ASIANPAINT', 
                      'HINDUNILVR', 'MARUTI', 'BAJFINANCE', 'TITAN', 'SUNPHARMA', 'BAJAJFINSV', 'NESTLEIND']
        elif index_name == "NIFTY_MIDCAP":
            symbols = ['ABCAPITAL', 'AUROPHARMA', 'BANKINDIA', 'BERGEPAINT', 'BIOCON', 'CHOLAFIN',
                      'COFORGE', 'CONCOR', 'CUMMINSIND', 'ESCORTS', 'FEDERALBNK', 'GODREJPROP',
                      'HAVELLS', 'IDFCFIRSTB', 'INDHOTEL', 'JINDALSTEL', 'LICHSGFIN', 'MPHASIS',
                      'NAM-INDIA', 'PAGEIND']
        else:  # NIFTY_SMALLCAP
            symbols = ['CDSL', 'EDELWEISS', 'GNFC', 'GRAPHITE', 'GRINDWELL', 'GSPL',
                      'HAPPSTMNDS', 'IRCON', 'JKLAKSHMI', 'KALYANKJIL', 'METROPOLIS', 'MOTILALOFS',
                      'NATIONALUM', 'PERSISTENT', 'RADICO', 'RAILTEL', 'RECLTD', 'ROUTE', 
                      'SUPREMEIND', 'TATACHEM']
        
        # Generate realistic price data for each symbol
        np.random.seed(sum(ord(c) for c in index_name))
        
        for symbol in symbols:
            # Generate last price based on symbol hash for consistency
            base_price = 100 + (sum(ord(c) for c in symbol) % 900)
            last_price = base_price + np.random.normal(0, base_price * 0.01)
            
            # Generate change and percent change
            change = np.random.normal(0, last_price * 0.015)
            p_change = (change / (last_price - change)) * 100
            
            base_data['lastPrice'].append(round(last_price, 2))
            base_data['change'].append(round(change, 2))
            base_data['pChange'].append(round(p_change, 2))
        
        # Create DataFrame
        df = pd.DataFrame({
            'symbol': symbols,
            'lastPrice': base_data['lastPrice'],
            'change': base_data['change'],
            'pChange': base_data['pChange']
        })
        
        # Add RSI data and recommendations
        df['weekly_rsi'] = None
        df['monthly_rsi'] = None
        df['recommendation'] = None
        
        for idx, row in df.iterrows():
            # Calculate RSI values
            weekly_data = get_historical_data(row['symbol'], '1W')
            monthly_data = get_historical_data(row['symbol'], '1M')
            
            weekly_rsi = calculate_rsi(weekly_data, 14)
            monthly_rsi = calculate_rsi(monthly_data, 14)
            
            df.at[idx, 'weekly_rsi'] = round(weekly_rsi, 2) if weekly_rsi is not None else np.nan
            df.at[idx, 'monthly_rsi'] = round(monthly_rsi, 2) if monthly_rsi is not None else np.nan
            
            # Generate recommendation based on RSI
            if weekly_rsi is not None and monthly_rsi is not None:
                if weekly_rsi > 60 and monthly_rsi > 60:
                    df.at[idx, 'recommendation'] = "SELL"
                elif weekly_rsi < 30 and monthly_rsi < 30:
                    df.at[idx, 'recommendation'] = "BUY"
                else:
                    df.at[idx, 'recommendation'] = "HOLD"
            else:
                df.at[idx, 'recommendation'] = "N/A"
        
        return df
    except Exception as e:
        logger.error(f"Error fetching {index_name} data: {str(e)}")
        return pd.DataFrame()

# Function to get GIFT Nifty data
def get_gift_nifty():
    try:
        # Fallback data
        gift_nifty_data = {
            'index': 'GIFT Nifty',
            'lastPrice': 22345.67,
            'change': 123.45,
            'pChange': 0.56
        }
        
        # Calculate RSI for GIFT Nifty
        historical_data = get_historical_data("GIFTNIFTY", "1W")
        weekly_rsi = calculate_rsi(historical_data, 14)
        
        historical_data_monthly = get_historical_data("GIFTNIFTY", "1M")
        monthly_rsi = calculate_rsi(historical_data_monthly, 14)
        
        gift_nifty_data['weekly_rsi'] = round(weekly_rsi, 2) if weekly_rsi is not None else np.nan
        gift_nifty_data['monthly_rsi'] = round(monthly_rsi, 2) if monthly_rsi is not None else np.nan
        
        # Add recommendation
        if weekly_rsi is not None and monthly_rsi is not None:
            if weekly_rsi > 60 and monthly_rsi > 60:
                gift_nifty_data['recommendation'] = "SELL"
            elif weekly_rsi < 30 and monthly_rsi < 30:
                gift_nifty_data['recommendation'] = "BUY"
            else:
                gift_nifty_data['recommendation'] = "HOLD"
        else:
            gift_nifty_data['recommendation'] = "N/A"
            
        return gift_nifty_data
    except Exception as e:
        logger.error(f"Error fetching GIFT Nifty data: {str(e)}")
        return {}

# Function to format stock data for Telegram message
def format_stock_data(largecap_data, midcap_data, smallcap_data, gift_nifty):
    try:
        # Format GIFT Nifty
        message = f"*GIFT Nifty*\n"
        message += f"Price: {gift_nifty['lastPrice']:.2f} | "
        message += f"Change: {gift_nifty['change']:.2f} ({gift_nifty['pChange']:.2f}%)\n"
        
        # Handle potential NaN values in RSI
        weekly_rsi = gift_nifty['weekly_rsi']
        monthly_rsi = gift_nifty['monthly_rsi']
        
        weekly_rsi_str = f"{weekly_rsi:.2f}" if not pd.isna(weekly_rsi) else "N/A"
        monthly_rsi_str = f"{monthly_rsi:.2f}" if not pd.isna(monthly_rsi) else "N/A"
        
        message += f"Weekly RSI: {weekly_rsi_str} | Monthly RSI: {monthly_rsi_str}\n"
        message += f"Recommendation: *{gift_nifty['recommendation']}*\n\n"
        
        # Format category headers and stock data
        categories = [
            {"name": "NIFTY LARGECAP", "data": largecap_data},
            {"name": "NIFTY MIDCAP", "data": midcap_data},
            {"name": "NIFTY SMALLCAP", "data": smallcap_data}
        ]
        
        for category in categories:
            message += f"*{category['name']}*\n"
            message += "```\n"
            message += f"{'Symbol':<10} {'Price':<8} {'W-RSI':<8} {'M-RSI':<8} {'Rec.':<8}\n"
            message += "-" * 42 + "\n"
            
            # Get data or show message if empty
            if not category['data'].empty:
                # Filter to show only BUY/SELL recommendations first
                action_df = category['data'][category['data']['recommendation'].isin(['BUY', 'SELL'])]
                
                if not action_df.empty:
                    for _, row in action_df.iterrows():
                        symbol = str(row['symbol'])[:10]
                        price = f"{float(row['lastPrice']):.2f}"
                        
                        # Handle potential NaN values
                        weekly_rsi = row['weekly_rsi']
                        monthly_rsi = row['monthly_rsi']
                        
                        weekly_rsi_str = f"{weekly_rsi:.2f}" if not pd.isna(weekly_rsi) else "N/A"
                        monthly_rsi_str = f"{monthly_rsi:.2f}" if not pd.isna(monthly_rsi) else "N/A"
                        
                        rec = str(row['recommendation'])
                        
                        message += f"{symbol:<10} {price:<8} {weekly_rsi_str:<8} {monthly_rsi_str:<8} {rec:<8}\n"
                else:
                    message += "No buy/sell recommendations at this time.\n"
            else:
                message += "No data available for this index.\n"
                
            message += "```\n\n"
        
        # Add timestamp
        message += f"Last updated: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        
        return message
    except Exception as e:
        logger.error(f"Error formatting data: {str(e)}")
        return "Error formatting stock data."

# Main function to run the bot
def main():
    try:
        logger.info("Starting Nifty Indices Telegram Bot with RSI Recommendations...")
        
        # Debug Telegram connection first
        debug_telegram_connection()
        
        # Get stock data for different indices
        largecap_data = get_index_stocks("NIFTY_LARGECAP")
        midcap_data = get_index_stocks("NIFTY_MIDCAP")
        smallcap_data = get_index_stocks("NIFTY_SMALLCAP")
        gift_nifty = get_gift_nifty()
        
        # Check if we have data
        if not largecap_data.empty and not midcap_data.empty and not smallcap_data.empty and gift_nifty:
            # Send a message with the current time
            current_time = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            hello_message = f"📊 NIFTY INDICES RSI TRADING SIGNALS - {current_time}"
            send_telegram_message(hello_message)
            
            # Send the formatted stock data
            stock_message = format_stock_data(largecap_data, midcap_data, smallcap_data, gift_nifty)
            send_telegram_message(stock_message)
            
            # Send additional note about RSI strategy
            strategy_note = (
                "*Trading Strategy Note:*\n"
                "• *BUY* signals when both Weekly & Monthly RSI < 30\n"
                "• *SELL* signals when both Weekly & Monthly RSI > 60\n"
                "• *HOLD* for all other conditions\n\n"
                "_Disclaimer: This is algorithmic analysis and not financial advice. "
                "Always do your own research before trading._"
            )
            send_telegram_message(strategy_note)
            
            logger.info("Stock data with RSI recommendations sent successfully")
        else:
            send_telegram_message("Unable to fetch complete market data at this time.")
            logger.error("Failed to fetch stock data")
            
    except Exception as e:
        logger.error(f"Unexpected error: {str(e)}")
        # Try to notify about the error
        try:
            send_telegram_message(f"Bot encountered an error: {str(e)}")
        except:
            pass

# Execute the main function when script is run
if __name__ == "__main__":
    main()
